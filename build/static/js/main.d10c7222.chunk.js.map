{"version":3,"sources":["components/List.js","components/Form.js","components/Contacts.js","components/App.js","serviceWorker.js","index.js"],"names":["List","state","filterText","onChangeFilterText","event","console","log","target","value","_this","setState","_this2","this","filteredContacts","props","contacts","filter","contact","name","toLowerCase","indexOf","react_default","a","createElement","className","onChange","id","placeholder","map","key","phone","Component","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","onSubmit","defineProperty","preventDefault","addContact","objectSpread","Contacts","src_components_List","components_Form","prototypes","PropTypes","array","isRequired","func","App","push","components_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d10c7222.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './List.css';\n\n\nclass List extends Component {\n    static propTypes = {\n        contacts: PropTypes.array.isRequired,\n    };\n\n    state = {\n        filterText:''\n    };\n    // Summary\n    // Arrow functions doesnt need bindings\n    onChangeFilterText=(event) => {\n        console.log(event.target.value);\n        this.setState({\n            filterText: event.target.value\n        });\n    };\n\n    render() {\n        const filteredContacts = this.props.contacts.filter(\n            // contact will come here\n            contact => {\n                return contact.name.toLowerCase().indexOf(\n                    this.state.filterText.toLowerCase()\n                ) !== -1\n                // if doesn't find it will return -1\n            }\n        );\n        return (\n            <div className={\"listArea\"}>\n            <input \n            value={this.state.filterText}\n            onChange={this.onChangeFilterText} \n            name={\"filter\"} \n            id={\"filter\"} \n            placeholder={\"Filter by name or phone\"} />\n            <ul className={\"list\"}>\n            {\n                    filteredContacts.map(contact =>                        \n                        <li key={contact.phone}>\n                            <span className={\"name\"}>{contact.name}</span>\n                            <span className={\"phone\"}>{contact.phone}</span>\n                            <span className={\"clearfix\"}></span>\n                        </li>                       \n                    )\n                }\n                \n            </ul>\n            </div>\n          \n        );\n    }\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\n\nclass Form extends Component {\n   constructor(){\n       super();\n    //    bind the method\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n   }\n\n    static propTypes = {\n        // And incoming function from parent \n        addContact: PropTypes.func\n    };\n   \n    state = {\n        name: '',\n        phone: ''\n    };\n\n    onChange(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit(event){\n        // Stoping the default behavior\n        event.preventDefault();\n        // console.log({...this.state});\n\n        // Sending the data to the\n        this.props.addContact({\n            ...this.state\n        });\n\n        // Clean the fields\n        this.setState({\n            name: '',\n            phone: '',\n        });\n\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <input \n                    name=\"name\" \n                    id=\"name\" \n                    value={this.state.name} \n                    onChange={this.onChange} \n                    placeholder=\"Enter a name\" />\n                    <br/>\n                   \n                    <input \n                    name=\"phone\" \n                    id=\"phone\" \n                    value={this.state.phone} \n                    onChange={this.onChange} \n                    placeholder=\"Enter a phone number\" />\n                    <button>Add</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport List from './List';\nimport Form from './Form';\n\n// We dont have any state here so will define here as a stateless component\n// StateLess Component\n\nconst Contacts = (props) => \n            <div>\n                 {/* Sending the states to the List component */}\n                <List contacts={props.contacts} />\n                <Form addContact={props.addContact} />\n            </div>\n\nContacts.prototypes = {\n    contacts: PropTypes.array.isRequired,\n    addContact: PropTypes.func\n}\n\nexport default Contacts;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Contacts from '../components/Contacts';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.addContact= this.addContact.bind(this);\n  }\n   state = {\n        contacts: [{\n            name: 'Mehmet',\n            phone: '12345215'\n        }, {\n            name: 'Mesut',\n            phone: '45687820'\n        }]\n    }\n\n  addContact(contact){\n    console.log('Incoming Contact: ', contact);\n    // filling contact under the state\n    const { contacts } = this.state;\n    contacts.push(contact)\n    // updating the state\n    this.setState({\n      contacts\n    });\n    \n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Contacts \n        // Sending method to contact component\n        addContact={this.addContact}\n        contacts={this.state.contacts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}